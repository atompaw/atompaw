======================
Packaging of AtomPAW
======================

Motivations
-----------

Some users and developers of Abinit would like to access AtomPAW more
directly from Abinit. To achieve this, AtomPAW should become and Abinit
plugin.

The ETSF is also currently aiming at packaging its software for Debian. The
first step consists in making available all the dependencies of the main
ETSF codes as Debian packages. And AtomPAW is now one of these dependencies.


An upgrade to higher coding standards
-------------------------------------

Providing an Autotools-based build system is an unanimous request from all
software packagers, whichever the Linux distribution they represent,
because it greatly simplifies their work. Following the GNU Coding Standards
(GCS) is also very well appreciated, and often relatively simple to conform
to. Having both increases the autonomy of the upstream maintainers and of
the packagers, while facilitating the participation of occasional
contributors and reviewers.

The version 2.3 of AtomPAW does however not comply with these needs.
This is the reason why the build system has been fully rewritten and a few
changes to the source code have been performed. The list below summarizes
what Yann Pouillon modified in the source code, starting from a pristine
AtomPAW 2.3 tarball:

  * Created a tarball unpacking in atompaw-2.3/.
  * Moved README and VERSION to the top source dir (GCS requirement).
  * Added AUTHORS (GCS requirement).
  * Added COPYING (GCS requirement): GPLv3 (for licence compatibility with
    imported code).
  * Renamed README to ChangeLog (GCS requirement).
  * Added generic INSTALL file (GCS requirement).
  * Added NEWS (GCS requirement).
  * Added bootstrap.sh (helper script for developers).
  * Added config/gnu/ (to host scripts generated by the Autootools).
  * Added config/m4/*.m4 (to replace and extend src/make.*).
  * Added configure.ac (source of Autoconf's configure script).
  * Added wipeout.sh (helper script for developers).
  * Replaced all Makefile's by Makefile.am's (for Automake).
  * Added VPATH support (separate build directories, packaging requirement).
  * Had the source files of AtomPAW built as a library: libatompaw.
  * Added an atompaw_lib.f90 stub for libatompaw.
  * Renamed atompaw.f90 to atompaw_prog.f90.
  * Allowed for the build of libatompaw as a shared object
    (packaging requirement).
  * Converted the old makefile includes into configuration scripts
    (see config/old/ and config/examples/).


User-visible changes
--------------------

Apart from a few file renames, the main changes visible to the users are:

  * the ability to build the code through the "configure; make; make install"
    trilogy;
  * the ability to use separate build dirs;
  * the ability to build in parallel ("make -j<n>");
  * the ability to install the code in a clean and seamless way;
  * the access to a comprehensive documentation all over the internet, in
    order to personalize and improve their builds.

To summarize, the experience of the end-user is made easier and enhanced,
by the adoption of a well-established methodology. The customizability of
the build system is preserved. It is however not done anymore through the
make.sys file, but by giving options to the configure script.


Developer-visible changes
-------------------------

The biggest change seen by the developers is that they now have to install
the Autotools, in order to keep the build system in sync with the evolution
of the source. Here are the minimum requirements:

  * M4 >= 1.4.5;
  * Autoconf >= 2.62;
  * Automake >= 1.10;
  * Libtool >= 2.2.2.

Using the latest versions, which provide a better Fortran support, is of
course highly recommended.

Editing the Makefile.am's is actually simpler than for plain Makefile's,
since Automake and Autoconf take care of adding the complexity required to
have a feature-full, reliable, portable and flexible build procedure. The
Autotools are necessary only when the structure of the source tree changes,
i.e. when files and/or directories are added, removed, or renamed. This
means that when modifying files, a simple "make" is enough to rebuild
properly what has to be rebuilt.

For a light project as AtomPAW, the little additional complexity brought
by the use of the Autotools is largely compensated by the resulting
upgrade in quality of the software, and it is worth spending a few hours
learning and practicing the related concepts. More details can be found
there:

  http://www.psi-k.org/newsletters/News_90/Highlight_90.pdf

Two scripts are provided for convenience:

  * bootstrap.sh: creates all necessary files so that the code can be
    configured and built, by calling the Autotools in the proper order
    with the proper options;

  * wipeout.sh: Cleans-up the source tree and removes all files generated
    by the Autotools.

The bootstrap.sh script is useful only to generate the Autotools files for
the first time. Afterwards, calling "autoreconf -i" is fairly enough. It
is recommended to version these scripts but not distribute them.


Maintainer-visible changes
--------------------------

A role that was probably not very well defined regarding AtomPAW is that
of maintainer. Due to the evolution from a purely manual configuration
procedure towards a semi-automatic one, this role becomes more clearly
identified. This does not mean at all that the associated tasks have to be
performed by additional people. Instead it will involve the most competent
developers. And looking at the size and complexity of AtomPAW, it will be
a rather easy task.

Basically, a maintainer is not part of a project to contribute new code,
but to ensure and improve its overall consistency, its robustness, its
portability, and its extensibility, as well as to participate actively in
strategic choices. They have to have a good knowledge of the code as a
whole, which is rarely the case of the average developer. With an
Autotools-based build system, it also implies some knowledge of
shell-scripting and of the M4 language.

In AtomPAW, most maintainer interventions will be concentrated in the
following files:

  * configure.ac;
  * config/m4/*.m4 (please note that some of them are generated by
    Libtool);
  * all Makefile.am's.

To be efficient, they will require the partial reading of a few documents,
in order to properly understand the underlying concepts and philosophy:

  * http://www.gnu.org/software/autoconf/manual/
  * http://www.gnu.org/software/automake/manual/
  * http://www.gnu.org/software/libtool/manual/
  * http://www.gnu.org/software/m4/manual/

The build system already implemented here will constitute a good example to
illustrate what is described in these documents. Help and advice may also
be obtained from Yann Pouillon.

In order to facilitate the step-in of the maintainers, here is a brief
description of the M4 macros found in config/m4/:

  * ax_f90_module_extension.m4: Detects the file extension of Fortran
    modules (imported from the Autoconf Archive, available at
    http://download.savannah.gnu.org/releases/autoconf-archive/).

  * fortran.m4: Detects compiler vendor and version (imported from Abinit),
    following the GCS conventions (e.g. "gnu" for gcc, and "intel" for
    ifort).

  * information.m4: Detects architecture and processor type, and can put
    initial information into a config.h.in file.

  * linalg.m4: Checks that the specified linear algebra libraries properly
    work.

  * optimizations.m4: Mimics the setting of optimization flags, formerly
    found in the make.* files (but follows the GCS conventions, see
    the description of fortran.m4).

  * workarounds.m4: Fixes some bugs of the Autotools, thus providing a
    better portability of the build system (imported from Abinit).

  * The other files are created by Libtool and should not be edited.

To give a simple image, these files can be considered as libraries of
shell-script routines called by the configure script.


Conclusions
-----------

With the changes described above, AtomPAW has become more portable and is
ready to be packaged into the major Linux distributions. A Debian package
will be created in due time, but the procedure will be relatively
cumbersome for the moment. Obviously, the task of the packagers will be
greatly facilitated if the build-system changes are integrated in one of
the next upstream releases.

There is no emergency. The developers of AtomPAW should take all the
necessary time to discuss this possibility and evaluate its consequences.
And of course, try first this new version themselves and send feedback to
Yann Pouillon <yann.pouillon@ehu.es>.

